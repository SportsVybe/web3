/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  MockVRFCoordinator,
  MockVRFCoordinatorInterface,
} from "../../contracts/MockVRFCoordinator";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    name: "requestRandomWords",
    outputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526000805534801561001457600080fd5b5061026e806100246000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80635d3b1d3014610030575b600080fd5b61004361003e366004610138565b610055565b60405190815260200160405180910390f35b60408051600180825281830190925260009133918391602080830190803683370190505090506000548160008151811061009157610091610222565b6020908102919091010152604051631fe543e360e01b81526001600160a01b03831690631fe543e3906100ca90869085906004016101ae565b600060405180830381600087803b1580156100e457600080fd5b505af11580156100f8573d6000803e3d6000fd5b50505050600160008082825461010e91906101fc565b909155509298975050505050505050565b803563ffffffff8116811461013357600080fd5b919050565b600080600080600060a0868803121561015057600080fd5b85359450602086013567ffffffffffffffff8116811461016f57600080fd5b9350604086013561ffff8116811461018657600080fd5b92506101946060870161011f565b91506101a26080870161011f565b90509295509295909350565b6000604082018483526020604081850152818551808452606086019150828701935060005b818110156101ef578451835293830193918301916001016101d3565b5090979650505050505050565b6000821982111561021d57634e487b7160e01b600052601160045260246000fd5b500190565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220a15b55fe0abef33983e01732b08361f8a27e60c219fcc52d7f3a6ad60d6df31364736f6c63430008070033";

type MockVRFCoordinatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockVRFCoordinatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockVRFCoordinator__factory extends ContractFactory {
  constructor(...args: MockVRFCoordinatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockVRFCoordinator> {
    return super.deploy(overrides || {}) as Promise<MockVRFCoordinator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockVRFCoordinator {
    return super.attach(address) as MockVRFCoordinator;
  }
  override connect(signer: Signer): MockVRFCoordinator__factory {
    return super.connect(signer) as MockVRFCoordinator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockVRFCoordinatorInterface {
    return new utils.Interface(_abi) as MockVRFCoordinatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockVRFCoordinator {
    return new Contract(address, _abi, signerOrProvider) as MockVRFCoordinator;
  }
}
