/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface SportsVybeInterface extends utils.Interface {
  functions: {
    "acceptChallengePool(string,uint256,uint256,uint256)": FunctionFragment;
    "acceptTeamMembershipRequest(string,uint256)": FunctionFragment;
    "challengePools(uint256)": FunctionFragment;
    "challenge_id_counter()": FunctionFragment;
    "checkUpkeep(bytes)": FunctionFragment;
    "claimReward(uint256)": FunctionFragment;
    "createChallengePool(string,uint256,uint256,uint256)": FunctionFragment;
    "createTeam(string)": FunctionFragment;
    "declineChallenge(uint256,uint256)": FunctionFragment;
    "getChallengePoolTeam1Members(uint256)": FunctionFragment;
    "getChallengePoolTeam2Members(uint256)": FunctionFragment;
    "getChallengePoolTeamMembers(uint256)": FunctionFragment;
    "getSVTAllowance()": FunctionFragment;
    "getSVTBalance()": FunctionFragment;
    "getTeamCount(uint256)": FunctionFragment;
    "getTeamMates(uint256)": FunctionFragment;
    "getTeamSportsmanship(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pending_challenge_pool_ids(uint256)": FunctionFragment;
    "performUpkeep(bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sendTeamMembershipRequest(string,uint256,address)": FunctionFragment;
    "sportsVybeToken()": FunctionFragment;
    "sportsmanship(address)": FunctionFragment;
    "submitVote(string,uint256,uint256)": FunctionFragment;
    "teamMembers(uint256,uint256)": FunctionFragment;
    "team_id_counter()": FunctionFragment;
    "team_membership_request(uint256,uint256)": FunctionFragment;
    "team_owner(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "votes(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptChallengePool"
      | "acceptTeamMembershipRequest"
      | "challengePools"
      | "challenge_id_counter"
      | "checkUpkeep"
      | "claimReward"
      | "createChallengePool"
      | "createTeam"
      | "declineChallenge"
      | "getChallengePoolTeam1Members"
      | "getChallengePoolTeam2Members"
      | "getChallengePoolTeamMembers"
      | "getSVTAllowance"
      | "getSVTBalance"
      | "getTeamCount"
      | "getTeamMates"
      | "getTeamSportsmanship"
      | "owner"
      | "pending_challenge_pool_ids"
      | "performUpkeep"
      | "renounceOwnership"
      | "sendTeamMembershipRequest"
      | "sportsVybeToken"
      | "sportsmanship"
      | "submitVote"
      | "teamMembers"
      | "team_id_counter"
      | "team_membership_request"
      | "team_owner"
      | "transferOwnership"
      | "votes"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptChallengePool",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptTeamMembershipRequest",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "challengePools",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "challenge_id_counter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createChallengePool",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createTeam",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "declineChallenge",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getChallengePoolTeam1Members",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getChallengePoolTeam2Members",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getChallengePoolTeamMembers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSVTAllowance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSVTBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTeamCount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTeamMates",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTeamSportsmanship",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pending_challenge_pool_ids",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendTeamMembershipRequest",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sportsVybeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sportsmanship",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitVote",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "teamMembers",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "team_id_counter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "team_membership_request",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "team_owner",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "votes",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptChallengePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptTeamMembershipRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challenge_id_counter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createChallengePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createTeam", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "declineChallenge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChallengePoolTeam1Members",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChallengePoolTeam2Members",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChallengePoolTeamMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSVTAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSVTBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTeamCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTeamMates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTeamSportsmanship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pending_challenge_pool_ids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendTeamMembershipRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sportsVybeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sportsmanship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "teamMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "team_id_counter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "team_membership_request",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "team_owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "votes", data: BytesLike): Result;

  events: {
    "ChallengePoolAccepted(string,uint256,uint256,uint256)": EventFragment;
    "ChallengePoolClosed(uint256)": EventFragment;
    "ChallengePoolCreated(string,uint256,uint256,uint256,uint256)": EventFragment;
    "Lose(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TeamCreated(string,uint256)": EventFragment;
    "TeamMembershipRequestAccept(string,uint256,address)": EventFragment;
    "TeamMembershipRequestSent(string,uint256,address,address)": EventFragment;
    "Tie(uint256,uint256,uint256)": EventFragment;
    "VoteSubmit(string,address,uint256,uint256)": EventFragment;
    "Win(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChallengePoolAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChallengePoolClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChallengePoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Lose"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TeamCreated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TeamMembershipRequestAccept"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TeamMembershipRequestSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Tie"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteSubmit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Win"): EventFragment;
}

export interface ChallengePoolAcceptedEventObject {
  action_id: string;
  challenge_id: BigNumber;
  team1: BigNumber;
  team2: BigNumber;
}
export type ChallengePoolAcceptedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  ChallengePoolAcceptedEventObject
>;

export type ChallengePoolAcceptedEventFilter =
  TypedEventFilter<ChallengePoolAcceptedEvent>;

export interface ChallengePoolClosedEventObject {
  challenge_id: BigNumber;
}
export type ChallengePoolClosedEvent = TypedEvent<
  [BigNumber],
  ChallengePoolClosedEventObject
>;

export type ChallengePoolClosedEventFilter =
  TypedEventFilter<ChallengePoolClosedEvent>;

export interface ChallengePoolCreatedEventObject {
  action_id: string;
  challenge_id: BigNumber;
  amount: BigNumber;
  team_id: BigNumber;
  challenged_team_id: BigNumber;
}
export type ChallengePoolCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  ChallengePoolCreatedEventObject
>;

export type ChallengePoolCreatedEventFilter =
  TypedEventFilter<ChallengePoolCreatedEvent>;

export interface LoseEventObject {
  challenge_id: BigNumber;
  team_id: BigNumber;
}
export type LoseEvent = TypedEvent<[BigNumber, BigNumber], LoseEventObject>;

export type LoseEventFilter = TypedEventFilter<LoseEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TeamCreatedEventObject {
  action_id: string;
  team_id: BigNumber;
}
export type TeamCreatedEvent = TypedEvent<
  [string, BigNumber],
  TeamCreatedEventObject
>;

export type TeamCreatedEventFilter = TypedEventFilter<TeamCreatedEvent>;

export interface TeamMembershipRequestAcceptEventObject {
  action_id: string;
  team_id: BigNumber;
  user: string;
}
export type TeamMembershipRequestAcceptEvent = TypedEvent<
  [string, BigNumber, string],
  TeamMembershipRequestAcceptEventObject
>;

export type TeamMembershipRequestAcceptEventFilter =
  TypedEventFilter<TeamMembershipRequestAcceptEvent>;

export interface TeamMembershipRequestSentEventObject {
  action_id: string;
  team_id: BigNumber;
  requested: string;
  requester: string;
}
export type TeamMembershipRequestSentEvent = TypedEvent<
  [string, BigNumber, string, string],
  TeamMembershipRequestSentEventObject
>;

export type TeamMembershipRequestSentEventFilter =
  TypedEventFilter<TeamMembershipRequestSentEvent>;

export interface TieEventObject {
  challenge_id: BigNumber;
  team1_id: BigNumber;
  team2_id: BigNumber;
}
export type TieEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  TieEventObject
>;

export type TieEventFilter = TypedEventFilter<TieEvent>;

export interface VoteSubmitEventObject {
  action_id: string;
  user: string;
  challenge_id: BigNumber;
  team_id: BigNumber;
}
export type VoteSubmitEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  VoteSubmitEventObject
>;

export type VoteSubmitEventFilter = TypedEventFilter<VoteSubmitEvent>;

export interface WinEventObject {
  challenge_id: BigNumber;
  team_id: BigNumber;
}
export type WinEvent = TypedEvent<[BigNumber, BigNumber], WinEventObject>;

export type WinEventFilter = TypedEventFilter<WinEvent>;

export interface SportsVybe extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SportsVybeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptChallengePool(
      action_id: PromiseOrValue<string>,
      challenge_id: PromiseOrValue<BigNumberish>,
      team_id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    acceptTeamMembershipRequest(
      action_id: PromiseOrValue<string>,
      team_id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    challengePools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        action_id: string;
        team1: BigNumber;
        team2: BigNumber;
        amount: BigNumber;
        isAccepted: boolean;
        isClosed: boolean;
        isCompleted: boolean;
        createdAt: BigNumber;
        interval: BigNumber;
        team1_count: BigNumber;
        team2_count: BigNumber;
      }
    >;

    challenge_id_counter(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    checkUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { upkeepNeeded: boolean; performData: string }
    >;

    claimReward(
      challenge_id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createChallengePool(
      action_id: PromiseOrValue<string>,
      team_id: PromiseOrValue<BigNumberish>,
      challenged_team_id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createTeam(
      action_id: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    declineChallenge(
      challenge_id: PromiseOrValue<BigNumberish>,
      team_id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getChallengePoolTeam1Members(
      challenge_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getChallengePoolTeam2Members(
      challenge_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getChallengePoolTeamMembers(
      challenge_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getSVTAllowance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSVTBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTeamCount(
      team_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTeamMates(
      team_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getTeamSportsmanship(
      _team_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pending_challenge_pool_ids(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    performUpkeep(
      performData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendTeamMembershipRequest(
      action_id: PromiseOrValue<string>,
      team_id: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sportsVybeToken(overrides?: CallOverrides): Promise<[string]>;

    sportsmanship(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    submitVote(
      action_id: PromiseOrValue<string>,
      challenge_id: PromiseOrValue<BigNumberish>,
      team_id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    teamMembers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    team_id_counter(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    team_membership_request(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { user: string }>;

    team_owner(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    votes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { challenge_id: BigNumber }>;
  };

  acceptChallengePool(
    action_id: PromiseOrValue<string>,
    challenge_id: PromiseOrValue<BigNumberish>,
    team_id: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  acceptTeamMembershipRequest(
    action_id: PromiseOrValue<string>,
    team_id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  challengePools(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      action_id: string;
      team1: BigNumber;
      team2: BigNumber;
      amount: BigNumber;
      isAccepted: boolean;
      isClosed: boolean;
      isCompleted: boolean;
      createdAt: BigNumber;
      interval: BigNumber;
      team1_count: BigNumber;
      team2_count: BigNumber;
    }
  >;

  challenge_id_counter(overrides?: CallOverrides): Promise<BigNumber>;

  checkUpkeep(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string] & { upkeepNeeded: boolean; performData: string }
  >;

  claimReward(
    challenge_id: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createChallengePool(
    action_id: PromiseOrValue<string>,
    team_id: PromiseOrValue<BigNumberish>,
    challenged_team_id: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createTeam(
    action_id: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  declineChallenge(
    challenge_id: PromiseOrValue<BigNumberish>,
    team_id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getChallengePoolTeam1Members(
    challenge_id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getChallengePoolTeam2Members(
    challenge_id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getChallengePoolTeamMembers(
    challenge_id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getSVTAllowance(overrides?: CallOverrides): Promise<BigNumber>;

  getSVTBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getTeamCount(
    team_id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTeamMates(
    team_id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getTeamSportsmanship(
    _team_id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pending_challenge_pool_ids(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  performUpkeep(
    performData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendTeamMembershipRequest(
    action_id: PromiseOrValue<string>,
    team_id: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sportsVybeToken(overrides?: CallOverrides): Promise<string>;

  sportsmanship(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  submitVote(
    action_id: PromiseOrValue<string>,
    challenge_id: PromiseOrValue<BigNumberish>,
    team_id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  teamMembers(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  team_id_counter(overrides?: CallOverrides): Promise<BigNumber>;

  team_membership_request(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  team_owner(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  votes(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    acceptChallengePool(
      action_id: PromiseOrValue<string>,
      challenge_id: PromiseOrValue<BigNumberish>,
      team_id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    acceptTeamMembershipRequest(
      action_id: PromiseOrValue<string>,
      team_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    challengePools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        action_id: string;
        team1: BigNumber;
        team2: BigNumber;
        amount: BigNumber;
        isAccepted: boolean;
        isClosed: boolean;
        isCompleted: boolean;
        createdAt: BigNumber;
        interval: BigNumber;
        team1_count: BigNumber;
        team2_count: BigNumber;
      }
    >;

    challenge_id_counter(overrides?: CallOverrides): Promise<BigNumber>;

    checkUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { upkeepNeeded: boolean; performData: string }
    >;

    claimReward(
      challenge_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createChallengePool(
      action_id: PromiseOrValue<string>,
      team_id: PromiseOrValue<BigNumberish>,
      challenged_team_id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createTeam(
      action_id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    declineChallenge(
      challenge_id: PromiseOrValue<BigNumberish>,
      team_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getChallengePoolTeam1Members(
      challenge_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getChallengePoolTeam2Members(
      challenge_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getChallengePoolTeamMembers(
      challenge_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getSVTAllowance(overrides?: CallOverrides): Promise<BigNumber>;

    getSVTBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getTeamCount(
      team_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTeamMates(
      team_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getTeamSportsmanship(
      _team_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pending_challenge_pool_ids(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    performUpkeep(
      performData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sendTeamMembershipRequest(
      action_id: PromiseOrValue<string>,
      team_id: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    sportsVybeToken(overrides?: CallOverrides): Promise<string>;

    sportsmanship(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitVote(
      action_id: PromiseOrValue<string>,
      challenge_id: PromiseOrValue<BigNumberish>,
      team_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    teamMembers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    team_id_counter(overrides?: CallOverrides): Promise<BigNumber>;

    team_membership_request(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    team_owner(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    votes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "ChallengePoolAccepted(string,uint256,uint256,uint256)"(
      action_id?: null,
      challenge_id?: null,
      team1?: null,
      team2?: null
    ): ChallengePoolAcceptedEventFilter;
    ChallengePoolAccepted(
      action_id?: null,
      challenge_id?: null,
      team1?: null,
      team2?: null
    ): ChallengePoolAcceptedEventFilter;

    "ChallengePoolClosed(uint256)"(
      challenge_id?: null
    ): ChallengePoolClosedEventFilter;
    ChallengePoolClosed(challenge_id?: null): ChallengePoolClosedEventFilter;

    "ChallengePoolCreated(string,uint256,uint256,uint256,uint256)"(
      action_id?: null,
      challenge_id?: null,
      amount?: null,
      team_id?: null,
      challenged_team_id?: null
    ): ChallengePoolCreatedEventFilter;
    ChallengePoolCreated(
      action_id?: null,
      challenge_id?: null,
      amount?: null,
      team_id?: null,
      challenged_team_id?: null
    ): ChallengePoolCreatedEventFilter;

    "Lose(uint256,uint256)"(
      challenge_id?: null,
      team_id?: null
    ): LoseEventFilter;
    Lose(challenge_id?: null, team_id?: null): LoseEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "TeamCreated(string,uint256)"(
      action_id?: null,
      team_id?: null
    ): TeamCreatedEventFilter;
    TeamCreated(action_id?: null, team_id?: null): TeamCreatedEventFilter;

    "TeamMembershipRequestAccept(string,uint256,address)"(
      action_id?: null,
      team_id?: null,
      user?: null
    ): TeamMembershipRequestAcceptEventFilter;
    TeamMembershipRequestAccept(
      action_id?: null,
      team_id?: null,
      user?: null
    ): TeamMembershipRequestAcceptEventFilter;

    "TeamMembershipRequestSent(string,uint256,address,address)"(
      action_id?: null,
      team_id?: null,
      requested?: null,
      requester?: null
    ): TeamMembershipRequestSentEventFilter;
    TeamMembershipRequestSent(
      action_id?: null,
      team_id?: null,
      requested?: null,
      requester?: null
    ): TeamMembershipRequestSentEventFilter;

    "Tie(uint256,uint256,uint256)"(
      challenge_id?: null,
      team1_id?: null,
      team2_id?: null
    ): TieEventFilter;
    Tie(challenge_id?: null, team1_id?: null, team2_id?: null): TieEventFilter;

    "VoteSubmit(string,address,uint256,uint256)"(
      action_id?: null,
      user?: null,
      challenge_id?: null,
      team_id?: null
    ): VoteSubmitEventFilter;
    VoteSubmit(
      action_id?: null,
      user?: null,
      challenge_id?: null,
      team_id?: null
    ): VoteSubmitEventFilter;

    "Win(uint256,uint256)"(challenge_id?: null, team_id?: null): WinEventFilter;
    Win(challenge_id?: null, team_id?: null): WinEventFilter;
  };

  estimateGas: {
    acceptChallengePool(
      action_id: PromiseOrValue<string>,
      challenge_id: PromiseOrValue<BigNumberish>,
      team_id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    acceptTeamMembershipRequest(
      action_id: PromiseOrValue<string>,
      team_id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    challengePools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    challenge_id_counter(overrides?: CallOverrides): Promise<BigNumber>;

    checkUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimReward(
      challenge_id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createChallengePool(
      action_id: PromiseOrValue<string>,
      team_id: PromiseOrValue<BigNumberish>,
      challenged_team_id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createTeam(
      action_id: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    declineChallenge(
      challenge_id: PromiseOrValue<BigNumberish>,
      team_id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getChallengePoolTeam1Members(
      challenge_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChallengePoolTeam2Members(
      challenge_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChallengePoolTeamMembers(
      challenge_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSVTAllowance(overrides?: CallOverrides): Promise<BigNumber>;

    getSVTBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getTeamCount(
      team_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTeamMates(
      team_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTeamSportsmanship(
      _team_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pending_challenge_pool_ids(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    performUpkeep(
      performData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendTeamMembershipRequest(
      action_id: PromiseOrValue<string>,
      team_id: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sportsVybeToken(overrides?: CallOverrides): Promise<BigNumber>;

    sportsmanship(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitVote(
      action_id: PromiseOrValue<string>,
      challenge_id: PromiseOrValue<BigNumberish>,
      team_id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    teamMembers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    team_id_counter(overrides?: CallOverrides): Promise<BigNumber>;

    team_membership_request(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    team_owner(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    votes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptChallengePool(
      action_id: PromiseOrValue<string>,
      challenge_id: PromiseOrValue<BigNumberish>,
      team_id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    acceptTeamMembershipRequest(
      action_id: PromiseOrValue<string>,
      team_id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    challengePools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    challenge_id_counter(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimReward(
      challenge_id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createChallengePool(
      action_id: PromiseOrValue<string>,
      team_id: PromiseOrValue<BigNumberish>,
      challenged_team_id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createTeam(
      action_id: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    declineChallenge(
      challenge_id: PromiseOrValue<BigNumberish>,
      team_id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getChallengePoolTeam1Members(
      challenge_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChallengePoolTeam2Members(
      challenge_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChallengePoolTeamMembers(
      challenge_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSVTAllowance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSVTBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTeamCount(
      team_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTeamMates(
      team_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTeamSportsmanship(
      _team_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pending_challenge_pool_ids(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    performUpkeep(
      performData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendTeamMembershipRequest(
      action_id: PromiseOrValue<string>,
      team_id: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sportsVybeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sportsmanship(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submitVote(
      action_id: PromiseOrValue<string>,
      challenge_id: PromiseOrValue<BigNumberish>,
      team_id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    teamMembers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    team_id_counter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    team_membership_request(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    team_owner(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    votes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
